// backend/scripts/check_db_health.js
require('dotenv').config();
const db = require('../src/config/database');

// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
// –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –ø—É–ª/–∫–æ–Ω—Ñ–∏–≥ –∏–∑ backend/src/config/database.js

// --- –£—Ç–∏–ª–∏—Ç—ã ---
const log = (message) => console.log(message);
const colors = {
  green: '\x1b[32m', red: '\x1b[31m', cyan: '\x1b[36m', reset: '\x1b[0m'
};

let issuesFound = 0;

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
 */
async function checkTable(tableName) {
  try {
    const res = await db.query(`SELECT to_regclass('public.${tableName}')`);
    if (res.rows[0].to_regclass) {
      const countRes = await db.query(`SELECT COUNT(*) FROM ${tableName};`);
      log(`  ${colors.green}‚úÖ ${tableName.padEnd(30)} | –ó–∞–ø–∏—Å–µ–π: ${countRes.rows[0].count}${colors.reset}`);
    } else {
      log(`  ${colors.red}‚ùå ${tableName.padEnd(30)} | –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!${colors.reset}`);
      issuesFound++;
    }
  } catch (e) {
    log(`  ${colors.red}‚ùå ${tableName.padEnd(30)} | –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${e.message}${colors.reset}`);
    issuesFound++;
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function checkHealth() {
  log(colors.cyan + '--- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---' + colors.reset);
  
  const coreTables = [
    'roles', 'tariffs', 'companies', 'users', 'categories', 'brands', 'products',
    'suppliers', 'marketplaces', 'warehouses', 'orders', 'payments'
  ];
  
  const logTables = ['audit_logs', 'sync_logs', 'api_logs', 'system_logs'];

  try {
    log('\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...');
    for (const table of coreTables) {
      await checkTable(table);
    }

    log('\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü –ª–æ–≥–æ–≤ –∏ –∞—É–¥–∏—Ç–∞...');
    for (const table of logTables) {
      await checkTable(table);
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞–∂–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—é–¥–∞
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π, –∏–Ω–¥–µ–∫—Å–æ–≤ –∏ —Ç.–¥.

    log('\n' + '-'.repeat(40));
    if (issuesFound > 0) {
      log(colors.red + `\n–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${issuesFound}. –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ!` + colors.reset);
    } else {
      log(colors.green + '\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.' + colors.reset);
    }

  } catch (error) {
    log(colors.red + `\n–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}` + colors.reset);
  } finally {
    await db.gracefulShutdown();
  }
}

checkHealth();