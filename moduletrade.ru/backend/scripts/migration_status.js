#!/usr/bin/env node

require('dotenv').config();
const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');

const pool = new Pool({
  host: process.env.DB_HOST || 'postgres',
  port: parseInt(process.env.DB_PORT, 10) || 5432,
  database: process.env.DB_NAME || 'saas_platform',
  user: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD || 'password',
});

async function checkMigrationStatus() {
  try {
    console.log('üìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n');
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    const connInfo = await pool.query('SELECT current_database(), current_user, version()');
    console.log(`üîó –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${connInfo.rows[0].current_database}`);
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${connInfo.rows[0].current_user}`);
    console.log(`üìù PostgreSQL: ${connInfo.rows[0].version.split(' ').slice(0,2).join(' ')}\n`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –º–∏–≥—Ä–∞—Ü–∏–π
    const tableExists = await pool.query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'migrations'
      );
    `);
    
    if (!tableExists.rows[0].exists) {
      console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ migrations –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      console.log('   –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ npm run migrate\n');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –º–∏–≥—Ä–∞—Ü–∏–π
      const migrationsDir = path.join(__dirname, '..', 'migrations');
      if (fs.existsSync(migrationsDir)) {
        const files = fs.readdirSync(migrationsDir).filter(f => f.endsWith('.sql')).sort();
        console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π: ${files.length}`);
        files.forEach(file => console.log(`   üìÑ ${file}`));
      } else {
        console.log('üìÅ –ü–∞–ø–∫–∞ migrations –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
      
      await showTables();
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    const executedResult = await pool.query(`
      SELECT name, executed_at 
      FROM migrations 
      ORDER BY id
    `);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –º–∏–≥—Ä–∞—Ü–∏–π
    const migrationsDir = path.join(__dirname, '..', 'migrations');
    let allFiles = [];
    
    if (fs.existsSync(migrationsDir)) {
      allFiles = fs.readdirSync(migrationsDir)
        .filter(file => file.endsWith('.sql'))
        .sort();
    }
    
    const executedMigrations = executedResult.rows.map(row => row.name);
    const pendingMigrations = allFiles.filter(file => !executedMigrations.includes(file));
    
    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log(`‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ (${executedMigrations.length}):`);
    if (executedMigrations.length === 0) {
      console.log('   –ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π');
    } else {
      executedResult.rows.forEach(row => {
        console.log(`   ‚úì ${row.name} (${row.executed_at.toISOString().slice(0,19).replace('T', ' ')})`);
      });
    }
    
    console.log(`\n‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (${pendingMigrations.length}):`);
    if (pendingMigrations.length === 0) {
      console.log('   –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã ‚ú®');
    } else {
      pendingMigrations.forEach(file => {
        console.log(`   ‚è≥ ${file}`);
      });
      console.log(`\nüí° –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: npm run migrate`);
    }
    
    await showTables();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error.message);
    process.exit(1);
  } finally {
    await pool.end();
  }
}

async function showTables() {
  try {
    const tables = await pool.query(`
      SELECT tablename
      FROM pg_tables 
      WHERE schemaname = 'public' 
      ORDER BY tablename
    `);
    
    console.log(`\nüìã –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (${tables.rows.length}):`);
    if (tables.rows.length === 0) {
      console.log('   –ù–µ—Ç —Ç–∞–±–ª–∏—Ü –≤ —Å—Ö–µ–º–µ public');
    } else {
      tables.rows.slice(0, 20).forEach(row => {
        console.log(`   üìÅ ${row.tablename}`);
      });
      if (tables.rows.length > 20) {
        console.log(`   ... –∏ –µ—â–µ ${tables.rows.length - 20} —Ç–∞–±–ª–∏—Ü`);
      }
    }
  } catch (error) {
    console.log('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü:', error.message);
  }
}

if (require.main === module) {
  checkMigrationStatus();
}

module.exports = { checkMigrationStatus };