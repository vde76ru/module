const { Pool } = require('pg');
const logger = require('../utils/logger');

// ========================================
// DATABASE CONFIGURATION
// ========================================

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞.
// –≠—Ç–æ "–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∞–≤–¥—ã", —á—Ç–æ —É—Å—Ç—Ä–∞–Ω—è–µ—Ç –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
const config = {
    // –î–ª—è Docker –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–º—è —Å–µ—Ä–≤–∏—Å–∞ ('postgres'), –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ - 'localhost'.
    host: process.env.DB_HOST || 'postgres',
    // –í–∞–∂–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –≤ docker-compose.yml –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ backend
    user: process.env.DB_USER || 'postgres',
    // –ù–µ –∑–∞–¥–∞–µ–º –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –ø—É—Å—Ç—å –ø–∞–¥–∞–µ—Ç —è–≤–Ω–æ, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME || 'saas_platform',
    port: parseInt(process.env.DB_PORT || '5432', 10),

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    min: 2,
    max: 20,
    idleTimeoutMillis: 300000,
    connectionTimeoutMillis: 10000,
};

logger.info({
    message: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
    host: config.host,
    port: config.port,
    database: config.database,
    user: config.user ? '******' : 'NOT SET', // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
});


// –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
const pool = new Pool(config);

// ========================================
// POOL EVENT HANDLERS
// ========================================

pool.on('connect', (client) => {
    logger.info('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL.');
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º search_path –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.
    client.query('SET search_path TO public').catch(err => {
        logger.error('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å search_path –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.', err);
    });
});

pool.on('error', (err) => {
    logger.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—É–ª–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π PostgreSQL.', err);
});

pool.on('remove', () => {
    logger.debug('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ (idle timeout).');
});

// ========================================
// DATABASE HELPER FUNCTIONS
// ========================================

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
 * @param {string} text - –¢–µ–∫—Å—Ç SQL-–∑–∞–ø—Ä–æ—Å–∞ —Å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º–∏ ($1, $2, ...).
 * @param {Array} params - –ú–∞—Å—Å–∏–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞.
 * @returns {Promise<import('pg').QueryResult>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞.
 */
async function query(text, params = []) {
    if (!Array.isArray(params)) {
        logger.error('‚ùå –û–®–ò–ë–ö–ê: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º!', { text, params });
        throw new Error('Query values must be an array');
    }

    const start = Date.now();
    try {
        const res = await pool.query(text, params);
        const duration = Date.now() - start;
        logger.debug({ message: '–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ', text, duration, rowCount: res.rowCount });
        return res;
    } catch (error) {
        const duration = Date.now() - start;
        logger.error({
            message: '‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î',
            error: { message: error.message },
            query: text,
            params: params,
            duration: duration
        });
        throw error;
    }
}

/**
 * –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –ú—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞.
 * –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ö–µ–º (SET search_path).
 * @param {string} companyId - ID —Ç–µ–Ω–∞–Ω—Ç–∞ (–ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω).
 * @param {string} text - SQL –∑–∞–ø—Ä–æ—Å.
 * @param {Array} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞.
 * @returns {Promise<import('pg').QueryResult>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞.
 */
async function queryWithTenant(companyId, text, params = []) {
    // –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —è–≤–ª—è–µ—Ç—Å—è –æ–±–µ—Ä—Ç–∫–æ–π.
    // –í –±—É–¥—É—â–µ–º –µ–µ –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ search_path –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ–Ω–∞–Ω—Ç–∞.
    logger.debug(`–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ç–µ–Ω–∞–Ω—Ç–∞ ${companyId}`);
    return query(text, params);
}


/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç –∏–∑ –ø—É–ª–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
 * –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –≤—ã–∑—ã–≤–∞—Ç—å client.release() –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.
 * @returns {Promise<import('pg').PoolClient>} –ö–ª–∏–µ–Ω—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
 */
async function getClient() {
    try {
        const client = await pool.connect();
        return client;
    } catch (error) {
        logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ø—É–ª–∞.', error);
        throw error;
    }
}

/**
 * –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
 * –ü–æ–ª–µ–∑–Ω–∞ –¥–ª—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /health.
 * @returns {Promise<boolean>} –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ.
 */
async function checkConnection() {
    let client;
    try {
        client = await pool.connect();
        await client.query('SELECT NOW()');
        logger.info('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.');
        return true;
    } catch (error) {
        logger.error('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å.', error);
        return false;
    } finally {
        if (client) {
            client.release();
        }
    }
}

/**
 * –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 */
async function gracefulShutdown() {
    logger.info('üõë –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...');
    try {
        await pool.end();
        logger.info('‚úÖ –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç.');
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.', error);
    }
}

// ========================================
// MODULE EXPORTS
// ========================================

module.exports = {
    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
    query,
    queryWithTenant, // <--- –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û
    getClient,
    checkConnection, // <--- –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û
    gracefulShutdown,
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∞–º –ø—É–ª –∏ –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞–µ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–∫—Ä–∏–ø—Ç–æ–≤)
    pool,
    config,
};
