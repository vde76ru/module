// backend/src/config/database.js
// –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
const { Pool } = require('pg');

// ========================================
// DATABASE CONFIGURATION
// ========================================

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ø—Ä–æ—â–∞–µ–º –ª–æ–≥–∏–∫—É SSL - –æ—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è Docker –æ–∫—Ä—É–∂–µ–Ω–∏—è
const isProduction = process.env.NODE_ENV === 'production';
const isDockerEnvironment = process.env.DB_HOST === 'postgres'; // –ò–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ docker-compose

// SSL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –í–°–ï–ì–î–ê –æ—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è Docker PostgreSQL
const sslConfig = false; // PostgreSQL –≤ Docker –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å SSL

console.log('Database configuration:', {
  host: process.env.DB_HOST,
  isProduction,
  isDockerEnvironment,
  ssl: sslConfig
});

// –û—Å–Ω–æ–≤–Ω–æ–π –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è public —Å—Ö–µ–º—ã
const mainPoolConfig = {
  host: process.env.DB_HOST || 'localhost',
  port: process.env.DB_PORT || 5432,
  database: process.env.DB_NAME || 'saas_platform',
  user: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD || 'password',

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–∞
  min: 2,
  max: 20,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 10000,
  statement_timeout: 30000,
  query_timeout: 30000,

  // SSL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –û–¢–ö–õ–Æ–ß–ï–ù–´
  ssl: sslConfig,

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  application_name: 'moduletrade-backend',
  keepAlive: true,
  keepAliveInitialDelayMillis: 10000
};

const mainPool = new Pool(mainPoolConfig);

// ========================================
// POOL EVENT HANDLERS
// ========================================

mainPool.on('connect', (client) => {
  console.log('‚úÖ –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º search_path –¥–ª—è –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ—Å—Ç–∏
  client.query('SET search_path TO public', (err) => {
    if (err) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ search_path:', err);
    }
  });
});

mainPool.on('error', (err, client) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ PostgreSQL –ø—É–ª–∞:', err);
  console.error('Client info:', client ? 'connected' : 'no client');
});

mainPool.on('remove', (client) => {
  console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ');
});

// ========================================
// DATABASE HELPER FUNCTIONS - –ò–°–ü–†–ê–í–õ–ï–ù–û
// ========================================

/**
 * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * @param {string} text - SQL –∑–∞–ø—Ä–æ—Å
 * @param {Array} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ú–ê–°–°–ò–í!)
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
 */
async function query(text, params = []) {
  const start = Date.now();
  try {
    // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–¥–∞–µ–º params –∫–∞–∫ –º–∞—Å—Å–∏–≤
    if (!Array.isArray(params)) {
      console.error('‚ùå –û–®–ò–ë–ö–ê: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º!', { text, params });
      throw new Error('Query values must be an array');
    }

    const res = await mainPool.query(text, params);
    const duration = Date.now() - start;
    
    if (process.env.LOG_LEVEL === 'debug') {
      console.log('Executed query', { text, duration, rows: res.rowCount });
    }
    
    return res;
  } catch (error) {
    const duration = Date.now() - start;
    console.error('‚ùå Database query error:', {
      error: error.message,
      query: text,
      params: params,
      duration: duration
    });
    throw error;
  }
}

/**
 * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ú—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Å tenantId
 * @param {string} tenantId - ID —Ç–µ–Ω–∞–Ω—Ç–∞
 * @param {string} text - SQL –∑–∞–ø—Ä–æ—Å
 * @param {Array} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
 */
async function queryWithTenant(tenantId, text, params = []) {
  // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º, —á—Ç–æ params –≤—Å–µ–≥–¥–∞ –º–∞—Å—Å–∏–≤
  const safeParams = Array.isArray(params) ? params : [];
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  if (process.env.LOG_LEVEL === 'debug') {
    console.log('Query with tenant:', { tenantId, text, params: safeParams });
  }
  
  return await query(text, safeParams);
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ø—É–ª–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 * @returns {Promise<Object>} –ö–ª–∏–µ–Ω—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
async function getClient() {
  try {
    const client = await mainPool.connect();
    return client;
  } catch (error) {
    console.error('Error getting database client:', error);
    throw error;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * @returns {Promise<boolean>} –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 */
async function checkConnection() {
  try {
    const result = await mainPool.query('SELECT NOW()');
    return true;
  } catch (error) {
    console.error('Database connection check failed:', error);
    return false;
  }
}

/**
 * Graceful shutdown
 */
async function gracefulShutdown() {
  console.log('üõë Closing database connections...');
  try {
    await mainPool.end();
    console.log('‚úÖ Database connections closed');
  } catch (error) {
    console.error('‚ùå Error closing database connections:', error);
  }
}

// ========================================
// MODULE EXPORTS
// ========================================

module.exports = {
  mainPool,
  query,
  queryWithTenant,
  getClient,
  checkConnection,
  gracefulShutdown
};