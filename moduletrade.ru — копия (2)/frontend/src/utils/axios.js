// ===================================================
// –§–ê–ô–õ: frontend/src/utils/axios.js
// –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ô HTTP –ö–õ–ò–ï–ù–¢ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
// ===================================================
import axios from 'axios';
import { notification } from 'antd';
import { API_ENDPOINTS } from 'utils/constants';

// =====================================
// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
// =====================================
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è API (–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è, —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏ /api)
// –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º origin —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å CORS/SSL –∏ –ø–æ–¥–¥–æ–º–µ–Ω–∞–º–∏
const DEFAULT_BASE = (typeof window !== 'undefined' && window.location && window.location.origin)
  ? window.location.origin
  : 'http://localhost:8080';
const RAW_API_BASE = (process.env.REACT_APP_API_URL || DEFAULT_BASE).replace(/\/+$/, '');
const API_BASE_URL = RAW_API_BASE.replace(/\/api$/, '');
const REQUEST_TIMEOUT = 30000;

// –ò–∑–±–µ–≥–∞–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ /auth/refresh
let refreshRequest = null;

// =====================================
// –°–û–ó–î–ê–ù–ò–ï INSTANCE
// =====================================
const axiosInstance = axios.create({
  baseURL: API_BASE_URL,
  timeout: REQUEST_TIMEOUT,
  headers: {
    'Content-Type': 'application/json',
  },
});

// =====================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// =====================================

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ localStorage
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤
 */
const getToken = () => {
  return localStorage.getItem('accessToken') || localStorage.getItem('token');
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ refresh —Ç–æ–∫–µ–Ω–∞
 */
const getRefreshToken = () => {
  return localStorage.getItem('refreshToken');
};

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –ø–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
 */
const setTokens = (token, refreshToken = null) => {
  localStorage.setItem('accessToken', token);
  localStorage.setItem('token', token); // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  if (refreshToken) {
    localStorage.setItem('refreshToken', refreshToken);
  }
};

/**
 * –û—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
 */
const clearTokens = () => {
  localStorage.removeItem('accessToken');
  localStorage.removeItem('token');
  localStorage.removeItem('refreshToken');
  localStorage.removeItem('user');
};

/**
 * –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞
 */
const decodeToken = (token) => {
  try {
    if (!token) return null;
    const payload = JSON.parse(atob(token.split('.')[1]));
    return payload;
  } catch (error) {
    console.warn('Token decode error:', error);
    return null;
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
 */
const isTokenExpired = (token) => {
  const decoded = decodeToken(token);
  if (!decoded || !decoded.exp) return true;

  const currentTime = Math.floor(Date.now() / 1000);
  return decoded.exp < currentTime;
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ company_id –∏–∑ —Ç–æ–∫–µ–Ω–∞
 */
const getTenantIdFromToken = (token) => {
  const decoded = decodeToken(token);
  return decoded?.companyId || decoded?.company_id || null;
};

// =====================================
// REQUEST INTERCEPTOR
// =====================================
axiosInstance.interceptors.request.use(
  (config) => {
    const token = getToken();

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;

      // –î–æ–±–∞–≤–ª—è–µ–º company_id –µ—Å–ª–∏ –µ—Å—Ç—å –≤ —Ç–æ–∫–µ–Ω–µ
      const companyId = getTenantIdFromToken(token);
      if (companyId) {
        config.headers['X-Tenant-ID'] = companyId;
      }
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ development —Ä–µ–∂–∏–º–µ
    if (process.env.NODE_ENV === 'development') {
      console.log(`üöÄ ${config.method?.toUpperCase()} ${config.url}`, {
        params: config.params,
        data: config.data,
      });
    }

    return config;
  },
  (error) => {
    console.error('Request interceptor error:', error);
    return Promise.reject(error);
  }
);

// =====================================
// RESPONSE INTERCEPTOR
// =====================================
axiosInstance.interceptors.response.use(
  (response) => {
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ development —Ä–µ–∂–∏–º–µ
    if (process.env.NODE_ENV === 'development') {
      console.log(`‚úÖ ${response.config.method?.toUpperCase()} ${response.config.url}`, {
        status: response.status,
        data: response.data,
      });
    }

    return response;
  },
  async (error) => {
    const originalRequest = error.config;

    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É–∂–µ –∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è —Ä–µ—Ñ—Ä–µ—à–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
    if (originalRequest?.url && String(originalRequest.url).includes(API_ENDPOINTS.REFRESH)) {
      clearTokens();
      if (typeof window !== 'undefined') {
        window.location.href = '/login';
      }
      return Promise.reject(error);
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤ development —Ä–µ–∂–∏–º–µ
    if (process.env.NODE_ENV === 'development') {
      console.error(`‚ùå ${originalRequest?.method?.toUpperCase()} ${originalRequest?.url}`, {
        status: error.response?.status,
        error: error.response?.data,
      });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ 401 –æ—à–∏–±–∫–∏ (Unauthorized)
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;

      const refreshToken = getRefreshToken();

      // refreshToken —É –Ω–∞—Å –Ω–µ JWT, –ø–æ—ç—Ç–æ–º—É –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
      if (refreshToken) {
        try {
          // –ï–¥–∏–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Ä–µ—Ñ—Ä–µ—à–∞ –Ω–∞ –≤—Å–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ 401
          if (!refreshRequest) {
            refreshRequest = axios.post(
              `${API_BASE_URL}${API_ENDPOINTS.REFRESH}`,
              { refreshToken },
              { headers: { 'Content-Type': 'application/json' } }
            ).finally(() => { refreshRequest = null; });
          }

          const response = await refreshRequest;

          if (response.data && (response.data.success || response.status === 200)) {
            const newToken = response.data.token || response.data.data?.tokens?.accessToken;
            const newRefreshToken = response.data.refreshToken || response.data.data?.tokens?.refreshToken || refreshToken;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
            setTokens(newToken, newRefreshToken);

            // –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
            originalRequest.headers.Authorization = `Bearer ${newToken}`;

            // –û–±–Ω–æ–≤–ª—è–µ–º company_id –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è
            const companyId = getTenantIdFromToken(newToken);
            if (companyId) {
              originalRequest.headers['X-Tenant-ID'] = companyId;
            }

            return axiosInstance(originalRequest);
          }
        } catch (refreshError) {
          console.warn('Token refresh failed:', refreshError);
          // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—á–∏—â–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
          clearTokens();
          window.location.href = '/login';
          return Promise.reject(refreshError);
        }
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç refresh —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –æ–Ω –∏—Å—Ç–µ–∫
        clearTokens();
        window.location.href = '/login';
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
    if (error.response) {
      const status = error.response.status;
      const errorMessage = error.response.data?.error ||
                          error.response.data?.message ||
                          '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞';

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ (–∫—Ä–æ–º–µ 401, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
      if (status !== 401) {
        notification.error({
          message: '–û—à–∏–±–∫–∞',
          description: errorMessage,
          duration: 5,
        });
      }
    } else if (error.request) {
      // –û—à–∏–±–∫–∞ —Å–µ—Ç–∏
      notification.error({
        message: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏',
        description: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º',
        duration: 5,
      });
    } else {
      // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
      notification.error({
        message: '–û—à–∏–±–∫–∞',
        description: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        duration: 5,
      });
    }

    return Promise.reject(error);
  }
);

// =====================================
// –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
// =====================================

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑–≤–Ω–µ
 */
axiosInstance.setToken = (token, refreshToken = null) => {
  setTokens(token, refreshToken);
};

/**
 * –û—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑–≤–Ω–µ
 */
axiosInstance.clearTokens = () => {
  clearTokens();
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
 */
axiosInstance.getToken = () => {
  return getToken();
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
axiosInstance.isAuthenticated = () => {
  const token = getToken();
  return token && !isTokenExpired(token);
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Ç–æ–∫–µ–Ω–∞
 */
axiosInstance.getCurrentUser = () => {
  const token = getToken();
  return decodeToken(token);
};

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ URL –¥–ª—è —Ñ–∞–π–ª–æ–≤/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */
axiosInstance.createFileUrl = (path) => {
  if (!path) return null;
  if (path.startsWith('http')) return path;
  return `${API_BASE_URL.replace('/api', '')}${path}`;
};

// =====================================
// –≠–ö–°–ü–û–†–¢
// =====================================
export default axiosInstance;