#!/usr/bin/env node

require('dotenv').config();
const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');

const pool = new Pool({
  host: process.env.DB_HOST || 'postgres',
  port: parseInt(process.env.DB_PORT, 10) || 5432,
  database: process.env.DB_NAME || 'saas_platform',
  user: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD || 'password',
});

async function checkMigrationStatus() {
  try {
    console.log('üìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ModuleTrade v2.0\n');

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    const connInfo = await pool.query('SELECT current_database(), current_user, version()');
    console.log(`üîó –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${connInfo.rows[0].current_database}`);
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${connInfo.rows[0].current_user}`);
    console.log(`üìù PostgreSQL: ${connInfo.rows[0].version.split(' ').slice(0,2).join(' ')}\n`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –º–∏–≥—Ä–∞—Ü–∏–π
    const newTableExists = await pool.query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables
        WHERE table_schema = 'public'
        AND table_name = 'schema_migrations'
      );
    `);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
    const oldTableExists = await pool.query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables
        WHERE table_schema = 'public'
        AND table_name = 'migrations'
      );
    `);

    let executedMigrations = [];

    if (newTableExists.rows[0].exists) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
      const executedResult = await pool.query(`
        SELECT filename, applied_at, success, execution_time_ms
        FROM schema_migrations
        ORDER BY applied_at
      `);
      executedMigrations = executedResult.rows.map(row => row.filename);

      console.log(`‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ (${executedResult.rows.length}):`);
      if (executedResult.rows.length === 0) {
        console.log('   –ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π');
      } else {
        executedResult.rows.forEach(row => {
          const status = row.success ? '‚úì' : '‚ùå';
          const time = row.execution_time_ms ? ` (${row.execution_time_ms}ms)` : '';
          console.log(`   ${status} ${row.filename}${time} - ${row.applied_at.toISOString().slice(0,19).replace('T', ' ')}`);
        });
      }

    } else if (oldTableExists.rows[0].exists) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
      console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞ migrations, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é');
      const executedResult = await pool.query(`
        SELECT name, executed_at
        FROM migrations
        ORDER BY id
      `);
      executedMigrations = executedResult.rows.map(row => row.name);

      console.log(`‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ (${executedResult.rows.length}):`);
      executedResult.rows.forEach(row => {
        console.log(`   ‚úì ${row.name} (${row.executed_at.toISOString().slice(0,19).replace('T', ' ')})`);
      });

    } else {
      console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ –º–∏–≥—Ä–∞—Ü–∏–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      console.log('   –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ npm run migrate\n');
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –º–∏–≥—Ä–∞—Ü–∏–π
    const migrationsDir = path.join(__dirname, '..', 'migrations');
    let allFiles = [];

    if (fs.existsSync(migrationsDir)) {
      allFiles = fs.readdirSync(migrationsDir)
        .filter(file => file.endsWith('.sql'))
        .sort();
    }

    const pendingMigrations = allFiles.filter(file => !executedMigrations.includes(file));

    // –í—ã–≤–æ–¥–∏–º –æ–∂–∏–¥–∞—é—â–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    console.log(`\n‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (${pendingMigrations.length}):`);
    if (pendingMigrations.length === 0) {
      console.log('   –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã ‚ú®');
    } else {
      pendingMigrations.forEach(file => {
        console.log(`   ‚è≥ ${file}`);
      });
      console.log(`\nüí° –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: npm run migrate`);
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –º–∏–≥—Ä–∞—Ü–∏–π
    console.log(`\nüìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π: ${allFiles.length}`);
    allFiles.forEach(file => {
      const status = executedMigrations.includes(file) ? '‚úÖ' : '‚è≥';
      console.log(`   ${status} ${file}`);
    });

    await showTables();
    await showDatabaseStats();

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error.message);
    process.exit(1);
  } finally {
    await pool.end();
  }
}

async function showTables() {
  try {
    const tables = await pool.query(`
      SELECT tablename, schemaname
      FROM pg_tables
      WHERE schemaname = 'public'
      ORDER BY tablename
    `);

    console.log(`\nüìã –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (${tables.rows.length}):`);
    if (tables.rows.length === 0) {
      console.log('   –ù–µ—Ç —Ç–∞–±–ª–∏—Ü –≤ —Å—Ö–µ–º–µ public');
    } else {
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º —Ç–∞–±–ª–∏—Ü
      const coreTabels = tables.rows.filter(t =>
        ['companies', 'users', 'products', 'warehouses', 'suppliers', 'marketplaces'].includes(t.tablename)
      );
      const systemTables = tables.rows.filter(t =>
        ['schema_migrations', 'migrations', 'logs', 'roles', 'permissions'].includes(t.tablename)
      );
      const analyticsTables = tables.rows.filter(t =>
        t.tablename.includes('analytics') || t.tablename.includes('kpi')
      );
      const otherTables = tables.rows.filter(t =>
        !coreTabels.includes(t) && !systemTables.includes(t) && !analyticsTables.includes(t)
      );

      if (coreTabels.length > 0) {
        console.log('\n   üè¢ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:');
        coreTabels.forEach(row => console.log(`      üìÅ ${row.tablename}`));
      }

      if (systemTables.length > 0) {
        console.log('\n   ‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:');
        systemTables.forEach(row => console.log(`      üìÅ ${row.tablename}`));
      }

      if (analyticsTables.length > 0) {
        console.log('\n   üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã:');
        analyticsTables.forEach(row => console.log(`      üìÅ ${row.tablename}`));
      }

      if (otherTables.length > 0) {
        console.log('\n   üì¶ –ü—Ä–æ—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã:');
        otherTables.slice(0, 15).forEach(row => console.log(`      üìÅ ${row.tablename}`));
        if (otherTables.length > 15) {
          console.log(`      ... –∏ –µ—â–µ ${otherTables.length - 15} —Ç–∞–±–ª–∏—Ü`);
        }
      }
    }
  } catch (error) {
    console.log('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü:', error.message);
  }
}

async function showDatabaseStats() {
  try {
    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    const mainTables = ['companies', 'users', 'products', 'warehouses', 'suppliers', 'marketplaces'];

    for (const table of mainTables) {
      try {
        const result = await pool.query(`SELECT COUNT(*) as count FROM ${table}`);
        console.log(`   üìä ${table}: ${result.rows[0].count} –∑–∞–ø–∏—Å–µ–π`);
      } catch (err) {
        console.log(`   ‚ùå ${table}: —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º RBAC —Å–∏—Å—Ç–µ–º—É
    try {
      const rolesCount = await pool.query('SELECT COUNT(*) as count FROM roles');
      const permissionsCount = await pool.query('SELECT COUNT(*) as count FROM permissions');
      const rolePermissionsCount = await pool.query('SELECT COUNT(*) as count FROM role_permissions');

      console.log(`\n   üîê RBAC —Å–∏—Å—Ç–µ–º–∞:`);
      console.log(`      üë• –†–æ–ª–µ–π: ${rolesCount.rows[0].count}`);
      console.log(`      üîë –†–∞–∑—Ä–µ—à–µ–Ω–∏–π: ${permissionsCount.rows[0].count}`);
      console.log(`      üîó –°–≤—è–∑–µ–π —Ä–æ–ª—å-—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: ${rolePermissionsCount.rows[0].count}`);
    } catch (err) {
      console.log('\n   ‚ö†Ô∏è RBAC —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    try {
      const salesCount = await pool.query('SELECT COUNT(*) as count FROM sales_analytics');
      console.log(`\n   üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞:`);
      console.log(`      üí∞ –ó–∞–ø–∏—Å–µ–π –ø—Ä–æ–¥–∞–∂: ${salesCount.rows[0].count}`);
    } catch (err) {
      console.log('\n   ‚ö†Ô∏è –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã');
    }

    // –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const dbSize = await pool.query(`
      SELECT pg_size_pretty(pg_database_size(current_database())) as size
    `);
    console.log(`\n   üíæ –†–∞–∑–º–µ—Ä –ë–î: ${dbSize.rows[0].size}`);

    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–¥–µ–∫—Å–æ–≤
    const indexCount = await pool.query(`
      SELECT COUNT(*) as count FROM pg_indexes WHERE schemaname = 'public'
    `);
    console.log(`   üóÇÔ∏è –ò–Ω–¥–µ–∫—Å–æ–≤: ${indexCount.rows[0].count}`);

  } catch (error) {
    console.log('\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
  }
}

if (require.main === module) {
  checkMigrationStatus();
}

module.exports = { checkMigrationStatus };