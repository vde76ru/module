// backend/src/config/database.js
const { Pool } = require('pg');

// ========================================
// DATABASE CONFIGURATION
// ========================================

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–µ–Ω –ª–∏ SSL
const isProduction = process.env.NODE_ENV === 'production';
const isDockerEnvironment = process.env.DB_HOST === 'postgres' || process.env.DB_HOST === 'localhost';

// SSL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –æ—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è Docker
const sslConfig = isProduction && !isDockerEnvironment ? {
  rejectUnauthorized: false
} : false;

// –û—Å–Ω–æ–≤–Ω–æ–π –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è public —Å—Ö–µ–º—ã
const mainPoolConfig = {
  host: process.env.DB_HOST || 'localhost',
  port: process.env.DB_PORT || 5432,
  database: process.env.DB_NAME || 'saas_platform',
  user: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD || 'password',

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–∞
  min: 2,
  max: 20,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 10000,
  statement_timeout: 30000,
  query_timeout: 30000,

  // SSL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  ssl: sslConfig,

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  application_name: 'moduletrade-backend',
  keepAlive: true,
  keepAliveInitialDelayMillis: 10000
};

const mainPool = new Pool(mainPoolConfig);

// ========================================
// POOL EVENT HANDLERS
// ========================================

mainPool.on('connect', (client) => {
  console.log('‚úÖ –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º search_path –¥–ª—è –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ—Å—Ç–∏
  client.query('SET search_path TO public', (err) => {
    if (err) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ search_path:', err);
    }
  });
});

mainPool.on('error', (err, client) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ PostgreSQL –ø—É–ª–∞:', err);
  console.error('Client:', client ? 'present' : 'null');
  // –ù–µ –ø–∞–¥–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø—É–ª–∞
});

mainPool.on('remove', () => {
  console.log('‚ùå –ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –ø—É–ª–∞');
});

// ========================================
// TENANT POOL FACTORY
// ========================================

// –ö–µ—à –ø—É–ª–æ–≤ –¥–ª—è —Ç–µ–Ω–∞–Ω—Ç–æ–≤
const tenantPools = new Map();

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ–Ω–∞–Ω—Ç–∞
 * @param {string} schemaName - –ò–º—è —Å—Ö–µ–º—ã —Ç–µ–Ω–∞–Ω—Ç–∞
 * @returns {Pool} –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
 */
function getTenantPool(schemaName) {
  if (!schemaName || schemaName === 'public') {
    return mainPool;
  }

  if (tenantPools.has(schemaName)) {
    return tenantPools.get(schemaName);
  }

  const tenantPool = new Pool({
    ...mainPoolConfig,
    application_name: `moduletrade-${schemaName}`,
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º search_path –¥–ª—è —Ç–µ–Ω–∞–Ω—Ç–∞
    options: `-c search_path=${schemaName},public`
  });

  tenantPool.on('error', (err) => {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—É–ª–∞ —Ç–µ–Ω–∞–Ω—Ç–∞ ${schemaName}:`, err);
  });

  tenantPools.set(schemaName, tenantPool);
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø—É–ª –¥–ª—è —Ç–µ–Ω–∞–Ω—Ç–∞: ${schemaName}`);

  return tenantPool;
}

// ========================================
// TRANSACTION HELPER
// ========================================

/**
 * –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 * @param {Pool} pool - –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
 * @param {Function} callback - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 * @returns {Promise<any>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏
 */
async function withTransaction(pool, callback) {
  const client = await pool.connect();

  try {
    await client.query('BEGIN');
    const result = await callback(client);
    await client.query('COMMIT');
    return result;
  } catch (error) {
    await client.query('ROLLBACK');
    throw error;
  } finally {
    client.release();
  }
}

// ========================================
// QUERY HELPERS
// ========================================

/**
 * –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
 * @param {Pool} pool - –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
 * @param {string} text - SQL –∑–∞–ø—Ä–æ—Å
 * @param {Array} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
 * @param {number} retries - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
 * @returns {Promise<object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
 */
async function queryWithRetry(pool, text, params = [], retries = 3) {
  for (let i = 0; i < retries; i++) {
    try {
      return await pool.query(text, params);
    } catch (error) {
      if (i === retries - 1) throw error;

      // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
      await new Promise(resolve => setTimeout(resolve, 1000 * (i + 1)));
    }
  }
}

// ========================================
// HEALTH CHECK
// ========================================

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
 * @returns {Promise<boolean>} –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 */
async function checkHealth() {
  try {
    const result = await mainPool.query('SELECT NOW()');
    return !!result.rows[0];
  } catch (error) {
    console.error('‚ùå Database health check failed:', error.message);
    return false;
  }
}

// ========================================
// GRACEFUL SHUTDOWN
// ========================================

async function gracefulShutdown() {
  console.log('üõë –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î...');

  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª—ã —Ç–µ–Ω–∞–Ω—Ç–æ–≤
  for (const [schemaName, pool] of tenantPools) {
    try {
      await pool.end();
      console.log(`‚úÖ –ó–∞–∫—Ä—ã—Ç –ø—É–ª —Ç–µ–Ω–∞–Ω—Ç–∞: ${schemaName}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—É–ª–∞ ${schemaName}:`, error);
    }
  }

  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—É–ª
  try {
    await mainPool.end();
    console.log('‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –ø—É–ª –∑–∞–∫—Ä—ã—Ç');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—É–ª–∞:', error);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);

// ========================================
// EXPORTS
// ========================================

module.exports = {
  mainPool,
  getTenantPool,
  withTransaction,
  queryWithRetry,
  checkHealth,
  gracefulShutdown
};