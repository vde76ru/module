#!/usr/bin/env node

require('dotenv').config();
const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');

const pool = new Pool({
  host: process.env.DB_HOST || 'postgres',
  port: parseInt(process.env.DB_PORT, 10) || 5432,
  database: process.env.DB_NAME || 'saas_platform',
  user: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD || 'password',
  max: 20,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 5000,
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
async function createMigrationsTable() {
  const createTableQuery = `
    CREATE TABLE IF NOT EXISTS migrations (
      id SERIAL PRIMARY KEY,
      name VARCHAR(255) UNIQUE NOT NULL,
      executed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
  `;
  await pool.query(createTableQuery);
  console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ migrations –≥–æ—Ç–æ–≤–∞');
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
async function getExecutedMigrations() {
  const result = await pool.query('SELECT name FROM migrations ORDER BY id');
  return result.rows.map(row => row.name);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π
function getMigrationFiles() {
  const migrationsDir = path.join(__dirname, '..', 'migrations');
  
  if (!fs.existsSync(migrationsDir)) {
    console.error('‚ùå –ü–∞–ø–∫–∞ migrations –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    console.log('üí° –°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É: mkdir -p migrations');
    process.exit(1);
  }

  return fs.readdirSync(migrationsDir)
    .filter(file => file.endsWith('.sql'))
    .sort();
}

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
async function executeMigration(filename) {
  console.log(`üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏: ${filename}`);
  
  const migrationPath = path.join(__dirname, '..', 'migrations', filename);
  const migrationSQL = fs.readFileSync(migrationPath, 'utf8');
  
  // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
  const client = await pool.connect();
  
  try {
    await client.query('BEGIN');
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º SQL –º–∏–≥—Ä–∞—Ü–∏–∏
    await client.query(migrationSQL);
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É –º–∏–≥—Ä–∞—Ü–∏–π
    await client.query(
      'INSERT INTO migrations (name) VALUES ($1)',
      [filename]
    );
    
    await client.query('COMMIT');
    console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è ${filename} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
    
  } catch (error) {
    await client.query('ROLLBACK');
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ ${filename}:`);
    console.error(`   ${error.message}`);
    throw error;
  } finally {
    client.release();
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
function checkMigrationSafety(filename) {
  const migrationPath = path.join(__dirname, '..', 'migrations', filename);
  const migrationSQL = fs.readFileSync(migrationPath, 'utf8');
  
  const dangerousPatterns = [
    /DROP\s+TABLE\s+(?!IF\s+EXISTS)/i,
    /DELETE\s+FROM\s+(?!.*WHERE)/i,
    /TRUNCATE\s+TABLE/i,
    /DROP\s+DATABASE/i,
    /DROP\s+SCHEMA\s+(?!IF\s+EXISTS)/i
  ];
  
  const dangerous = dangerousPatterns.some(pattern => pattern.test(migrationSQL));
  
  if (dangerous) {
    console.warn(`‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ú–∏–≥—Ä–∞—Ü–∏—è ${filename} —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏!`);
    if (process.env.FORCE_UNSAFE_MIGRATIONS !== 'true') {
      console.error('‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FORCE_UNSAFE_MIGRATIONS=true –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
      return false;
    }
  }
  
  return true;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–∏–≥—Ä–∞—Ü–∏–π...\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const client = await pool.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    client.release();
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –º–∏–≥—Ä–∞—Ü–∏–π
    await createMigrationsTable();
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–π
    const executedMigrations = await getExecutedMigrations();
    const allMigrationFiles = getMigrationFiles();
    
    // –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    const pendingMigrations = allMigrationFiles.filter(
      file => !executedMigrations.includes(file)
    );
    
    console.log(`üìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π:`);
    console.log(`   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${executedMigrations.length}`);
    console.log(`   ‚è≥ –û–∂–∏–¥–∞–µ—Ç: ${pendingMigrations.length}`);
    console.log(`   üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${allMigrationFiles.length}\n`);
    
    if (pendingMigrations.length === 0) {
      console.log('üéâ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!');
      return;
    }
    
    console.log(`üìã –ù–æ–≤—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:`);
    pendingMigrations.forEach(file => console.log(`   üìÑ ${file}`));
    console.log('');
    
    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è production
    if (process.env.NODE_ENV === 'production') {
      console.log('‚ö†Ô∏è  PRODUCTION –†–ï–ñ–ò–ú: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–æ–∑–¥–∞–ª–∏ backup!');
      console.log('   –ö–æ–º–∞–Ω–¥–∞: npm run db:backup\n');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –º–∏–≥—Ä–∞—Ü–∏–π
    let allSafe = true;
    for (const migration of pendingMigrations) {
      if (!checkMigrationSafety(migration)) {
        allSafe = false;
      }
    }
    
    if (!allSafe) {
      process.exit(1);
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –æ–¥–Ω—É –∑–∞ –¥—Ä—É–≥–æ–π
    for (const migration of pendingMigrations) {
      await executeMigration(migration);
    }
    
    console.log('\nüéâ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: npm run db:status');
    
  } catch (error) {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    console.error('üõ†Ô∏è  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
    console.error('   - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    console.error('   - –°–∏–Ω—Ç–∞–∫—Å–∏—Å SQL –≤ —Ñ–∞–π–ª–∞—Ö –º–∏–≥—Ä–∞—Ü–∏–π');
    console.error('   - –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    process.exit(1);
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main();
}

module.exports = { main };