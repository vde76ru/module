// backend/scripts/safe_migrate.js
const fs = require('fs');
const path = require('path');
const { Pool } = require('pg');

// ========================================
// DATABASE CONFIGURATION
// ========================================

const pool = new Pool({
  host: process.env.DB_HOST || 'postgres',
  port: process.env.DB_PORT || 5432,
  database: process.env.DB_NAME || 'saas_platform',
  user: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD || 'SecurePostgresPass2025',
  max: 5,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 10000,
});

// –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –º–∏–≥—Ä–∞—Ü–∏—è–º–∏
const MIGRATIONS_DIR = path.join(__dirname, '..', 'migrations');

// ========================================
// UTILITY FUNCTIONS
// ========================================

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
 */
function log(message, level = 'INFO') {
  const timestamp = new Date().toISOString();
  const colors = {
    INFO: '\x1b[36m',    // Cyan
    SUCCESS: '\x1b[32m', // Green
    WARNING: '\x1b[33m', // Yellow
    ERROR: '\x1b[31m',   // Red
    RESET: '\x1b[0m'     // Reset
  };

  console.log(`${colors[level]}[${timestamp}] ${level}: ${message}${colors.RESET}`);
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
 */
async function createMigrationsTable() {
  try {
    await pool.query(`
      CREATE TABLE IF NOT EXISTS schema_migrations (
        id SERIAL PRIMARY KEY,
        filename VARCHAR(255) NOT NULL UNIQUE,
        applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        checksum VARCHAR(64),
        execution_time_ms INTEGER,
        success BOOLEAN DEFAULT TRUE
      )
    `);

    log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ schema_migrations –≥–æ—Ç–æ–≤–∞');
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –º–∏–≥—Ä–∞—Ü–∏–π: ${error.message}`, 'ERROR');
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
 */
async function getExecutedMigrations() {
  try {
    const result = await pool.query(`
      SELECT filename FROM schema_migrations
      WHERE success = TRUE
      ORDER BY applied_at ASC
    `);

    return result.rows.map(row => row.filename);
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π: ${error.message}`, 'ERROR');
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π
 */
function getMigrationFiles() {
  try {
    if (!fs.existsSync(MIGRATIONS_DIR)) {
      log(`‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–∏–≥—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${MIGRATIONS_DIR}`, 'WARNING');
      return [];
    }

    const files = fs.readdirSync(MIGRATIONS_DIR)
      .filter(file => file.endsWith('.sql'))
      .sort();

    log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π`);
    return files;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π: ${error.message}`, 'ERROR');
    throw error;
  }
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç checksum —Ñ–∞–π–ª–∞
 */
function calculateChecksum(content) {
  const crypto = require('crypto');
  return crypto.createHash('sha256').update(content).digest('hex').substring(0, 16);
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–Ω—É –º–∏–≥—Ä–∞—Ü–∏—é
 */
async function executeMigration(filename) {
  const filePath = path.join(MIGRATIONS_DIR, filename);
  const startTime = Date.now();

  try {
    log(`üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏: ${filename}`);

    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏
    const migrationSQL = fs.readFileSync(filePath, 'utf8');
    const checksum = calculateChecksum(migrationSQL);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏
    if (!checkMigrationSafety(filename, migrationSQL)) {
      throw new Error('Migration failed safety check');
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const client = await pool.connect();

    try {
      await client.query('BEGIN');

      // –í—ã–ø–æ–ª–Ω—è–µ–º SQL –º–∏–≥—Ä–∞—Ü–∏–∏
      await client.query(migrationSQL);

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∏–≥—Ä–∞—Ü–∏–∏
      const executionTime = Date.now() - startTime;
      await client.query(`
        INSERT INTO schema_migrations (filename, checksum, execution_time_ms, success)
        VALUES ($1, $2, $3, TRUE)
      `, [filename, checksum, executionTime]);

      await client.query('COMMIT');

      log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è ${filename} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ (${executionTime}ms)`, 'SUCCESS');

    } catch (error) {
      await client.query('ROLLBACK');

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
      try {
        const executionTime = Date.now() - startTime;
        await client.query(`
          INSERT INTO schema_migrations (filename, checksum, execution_time_ms, success)
          VALUES ($1, $2, $3, FALSE)
        `, [filename, calculateChecksum(migrationSQL), executionTime]);
      } catch (logError) {
        log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ: ${logError.message}`, 'WARNING');
      }

      throw error;
    } finally {
      client.release();
    }

  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ ${filename}: ${error.message}`, 'ERROR');
    throw error;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏
 */
function checkMigrationSafety(filename, migrationSQL) {
  log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: ${filename}`);

  // –°–ø–∏—Å–æ–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  const dangerousPatterns = [
    /DROP\s+TABLE\s+(?!IF\s+EXISTS)/i,
    /DELETE\s+FROM\s+(?!.*WHERE)/i,
    /TRUNCATE\s+TABLE/i,
    /DROP\s+DATABASE/i,
    /DROP\s+SCHEMA\s+(?!IF\s+EXISTS)/i,
    /ALTER\s+TABLE\s+.*\s+DROP\s+COLUMN/i
  ];

  const dangerous = dangerousPatterns.some(pattern => pattern.test(migrationSQL));

  if (dangerous) {
    log(`‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ú–∏–≥—Ä–∞—Ü–∏—è ${filename} —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏!`, 'WARNING');

    if (process.env.FORCE_UNSAFE_MIGRATIONS !== 'true') {
      log('‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FORCE_UNSAFE_MIGRATIONS=true –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–∞—Å–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π', 'ERROR');
      return false;
    } else {
      log('‚ö†Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–∞—Å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —á–µ—Ä–µ–∑ FORCE_UNSAFE_MIGRATIONS', 'WARNING');
    }
  }

  return true;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π
 */
async function checkMigrationStatus() {
  try {
    const executedMigrations = await getExecutedMigrations();
    const allMigrationFiles = getMigrationFiles();

    const pendingMigrations = allMigrationFiles.filter(
      file => !executedMigrations.includes(file)
    );

    log(`üìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π:`);
    log(`   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${executedMigrations.length}`);
    log(`   ‚è≥ –û–∂–∏–¥–∞–µ—Ç: ${pendingMigrations.length}`);
    log(`   üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${allMigrationFiles.length}`);

    if (pendingMigrations.length > 0) {
      log(`üìã –û–∂–∏–¥–∞—é—â–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏:`);
      pendingMigrations.forEach(file => log(`   üìÑ ${file}`));
    }

    return {
      executed: executedMigrations,
      pending: pendingMigrations,
      total: allMigrationFiles.length
    };

  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`, 'ERROR');
    throw error;
  }
}

// ========================================
// MAIN FUNCTION
// ========================================

async function main() {
  try {
    log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–∏–≥—Ä–∞—Ü–∏–π ModuleTrade...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const client = await pool.connect();
    const dbResult = await client.query('SELECT version()');
    client.release();

    log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${dbResult.rows[0].version.split(',')[0]}`, 'SUCCESS');

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –º–∏–≥—Ä–∞—Ü–∏–π
    await createMigrationsTable();

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–π
    const status = await checkMigrationStatus();

    // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
    if (status.pending.length === 0) {
      log('üéâ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!', 'SUCCESS');
      return;
    }

    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è production
    if (process.env.NODE_ENV === 'production') {
      log('‚ö†Ô∏è PRODUCTION –†–ï–ñ–ò–ú: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–æ–∑–¥–∞–ª–∏ backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!', 'WARNING');
      log('   –ö–æ–º–∞–Ω–¥–∞: npm run db:backup');

      // –í production –∂–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      if (!process.env.AUTO_MIGRATE) {
        log('‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ AUTO_MIGRATE=true –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ production', 'ERROR');
        process.exit(1);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –º–∏–≥—Ä–∞—Ü–∏–π
    let allSafe = true;
    for (const migration of status.pending) {
      const filePath = path.join(MIGRATIONS_DIR, migration);
      const migrationSQL = fs.readFileSync(filePath, 'utf8');

      if (!checkMigrationSafety(migration, migrationSQL)) {
        allSafe = false;
      }
    }

    if (!allSafe) {
      log('‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', 'ERROR');
      process.exit(1);
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –æ–¥–Ω—É –∑–∞ –¥—Ä—É–≥–æ–π
    log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ${status.pending.length} –º–∏–≥—Ä–∞—Ü–∏–π...`);

    for (let i = 0; i < status.pending.length; i++) {
      const migration = status.pending[i];
      log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${i + 1}/${status.pending.length}`);

      try {
        await executeMigration(migration);
      } catch (error) {
        log(`‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è ${migration} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π`, 'ERROR');
        log(`üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SQL —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏`, 'WARNING');
        throw error;
      }
    }

    log('üéâ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!', 'SUCCESS');
    log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: npm run db:status');

  } catch (error) {
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: ${error.message}`, 'ERROR');
    log('üõ†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:', 'WARNING');
    log('   - –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    log('   - –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ SQL');
    log('   - –ù–∞—Ä—É—à–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏');
    log('   - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');

    if (error.code) {
      log(`   - PostgreSQL –∫–æ–¥ –æ—à–∏–±–∫–∏: ${error.code}`, 'WARNING');
    }

    process.exit(1);
  } finally {
    await pool.end();
  }
}

// ========================================
// EXECUTION
// ========================================

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  const args = process.argv.slice(2);

  if (args.includes('--dry-run')) {
    log('üîç –†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ (dry-run)', 'INFO');

    (async () => {
      try {
        const client = await pool.connect();
        client.release();
        await createMigrationsTable();
        await checkMigrationStatus();
        log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', 'SUCCESS');
      } catch (error) {
        log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}`, 'ERROR');
        process.exit(1);
      } finally {
        await pool.end();
      }
    })();
  } else {
    main();
  }
}

module.exports = { main, checkMigrationStatus };