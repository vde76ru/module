// ===================================================
// –§–ê–ô–õ: backend/src/config/redis.js
// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø REDIS –î–õ–Ø –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø
// ===================================================

const redis = require('redis');
const logger = require('../utils/logger');

// ========================================
// REDIS CONFIGURATION
// ========================================

const redisConfig = {
  host: process.env.REDIS_HOST || 'redis',
  port: parseInt(process.env.REDIS_PORT || '6379', 10),
  password: process.env.REDIS_PASSWORD || 'SecureRedisPass2025',
  retry_strategy: (options) => {
    if (options.error && options.error.code === 'ECONNREFUSED') {
      logger.error('‚ùå Redis server refused connection');
      return new Error('Redis server refused connection');
    }
    if (options.total_retry_time > 1000 * 60 * 60) {
      logger.error('‚ùå Redis retry time exhausted');
      return new Error('Retry time exhausted');
    }
    if (options.attempt > 10) {
      logger.error('‚ùå Redis max retry attempts reached');
      return undefined;
    }
    return Math.min(options.attempt * 100, 3000);
  },
  max_attempts: 10,
  connect_timeout: 10000,
  command_timeout: 5000,
};

// ========================================
// REDIS CLIENT CREATION
// ========================================

let redisClient = null;

async function createRedisClient() {
  try {
    redisClient = redis.createClient(redisConfig);

    redisClient.on('connect', () => {
      logger.info('‚úÖ Redis client connected');
    });

    redisClient.on('ready', () => {
      logger.info('‚úÖ Redis client ready');
    });

    redisClient.on('error', (err) => {
      logger.error('‚ùå Redis client error:', err);
    });

    redisClient.on('end', () => {
      logger.info('üîå Redis client disconnected');
    });

    redisClient.on('reconnecting', () => {
      logger.info('üîÑ Redis client reconnecting...');
    });

    await redisClient.connect();
    return redisClient;
  } catch (error) {
    logger.error('‚ùå Failed to create Redis client:', error);
    throw error;
  }
}

// ========================================
// CACHE HELPER FUNCTIONS
// ========================================

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫—ç—à
 */
async function set(key, value, ttl = 3600) {
  try {
    if (!redisClient) {
      await createRedisClient();
    }
    
    const serializedValue = typeof value === 'object' ? JSON.stringify(value) : value;
    await redisClient.setEx(key, ttl, serializedValue);
    logger.debug(`‚úÖ Cache set: ${key}`);
  } catch (error) {
    logger.error('‚ùå Cache set error:', error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞
 */
async function get(key) {
  try {
    if (!redisClient) {
      await createRedisClient();
    }
    
    const value = await redisClient.get(key);
    if (value) {
      try {
        return JSON.parse(value);
      } catch {
        return value;
      }
    }
    return null;
  } catch (error) {
    logger.error('‚ùå Cache get error:', error);
    return null;
  }
}

/**
 * –£–¥–∞–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞
 */
async function del(key) {
  try {
    if (!redisClient) {
      await createRedisClient();
    }
    
    await redisClient.del(key);
    logger.debug(`‚úÖ Cache deleted: ${key}`);
  } catch (error) {
    logger.error('‚ùå Cache delete error:', error);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞
 */
async function exists(key) {
  try {
    if (!redisClient) {
      await createRedisClient();
    }
    
    return await redisClient.exists(key);
  } catch (error) {
    logger.error('‚ùå Cache exists error:', error);
    return false;
  }
}

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–ª—é—á–∞
 */
async function expire(key, ttl) {
  try {
    if (!redisClient) {
      await createRedisClient();
    }
    
    await redisClient.expire(key, ttl);
    logger.debug(`‚úÖ Cache expire set: ${key} -> ${ttl}s`);
  } catch (error) {
    logger.error('‚ùå Cache expire error:', error);
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–ª—é—á–∞
 */
async function ttl(key) {
  try {
    if (!redisClient) {
      await createRedisClient();
    }
    
    return await redisClient.ttl(key);
  } catch (error) {
    logger.error('‚ùå Cache TTL error:', error);
    return -1;
  }
}

/**
 * –û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫—ç—à
 */
async function flush() {
  try {
    if (!redisClient) {
      await createRedisClient();
    }
    
    await redisClient.flushDb();
    logger.info('‚úÖ Cache flushed');
  } catch (error) {
    logger.error('‚ùå Cache flush error:', error);
  }
}

/**
 * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis
 */
async function close() {
  try {
    if (redisClient) {
      await redisClient.quit();
      redisClient = null;
      logger.info('‚úÖ Redis client closed');
    }
  } catch (error) {
    logger.error('‚ùå Redis close error:', error);
  }
}

// ========================================
// EXPORTS
// ========================================

module.exports = {
  createRedisClient,
  set,
  get,
  del,
  exists,
  expire,
  ttl,
  flush,
  close,
  client: redisClient
}; 