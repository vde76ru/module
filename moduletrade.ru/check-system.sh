#!/bin/bash

echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã ModuleTrade..."
echo "============================================"

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# –§—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞
print_header() {
    echo -e "\n${BLUE}‚ñ∂ $1${NC}"
    echo "-------------------"
}

print_ok() {
    echo -e "${GREEN}‚úì${NC} $1"
}

print_error() {
    echo -e "${RED}‚úó${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}!${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
print_header "Docker Status"
if docker --version > /dev/null 2>&1; then
    print_ok "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $(docker --version)"
else
    print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    exit 1
fi

if docker compose version > /dev/null 2>&1; then
    print_ok "Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $(docker compose version)"
else
    print_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
print_header "–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
docker compose ps --format "table {{.Name}}\t{{.Status}}\t{{.State}}" | while read line; do
    if [[ $line == *"Up"* ]] && [[ $line == *"running"* ]]; then
        echo -e "${GREEN}‚úì${NC} $line"
    elif [[ $line == *"NAME"* ]]; then
        echo "$line"
    else
        echo -e "${RED}‚úó${NC} $line"
    fi
done

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
print_header "–ó–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–æ–≤"
for service in postgres redis rabbitmq backend frontend nginx; do
    health=$(docker compose ps $service --format json 2>/dev/null | grep -o '"Health":"[^"]*"' | cut -d'"' -f4)
    if [ "$health" = "healthy" ]; then
        print_ok "$service: healthy"
    elif [ -z "$health" ]; then
        status=$(docker compose ps $service --format json 2>/dev/null | grep -o '"State":"[^"]*"' | cut -d'"' -f4)
        if [ "$status" = "running" ]; then
            print_warning "$service: running (no health check)"
        else
            print_error "$service: $status"
        fi
    else
        print_error "$service: $health"
    fi
done

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤"
ports=("80:nginx" "443:nginx" "5432:postgres" "6379:redis" "5672:rabbitmq" "15672:rabbitmq-management")
for port_info in "${ports[@]}"; do
    port="${port_info%%:*}"
    service="${port_info#*:}"
    if netstat -tuln 2>/dev/null | grep -q ":$port "; then
        print_ok "–ü–æ—Ä—Ç $port ($service) - –∑–∞–Ω—è—Ç"
    else
        print_warning "–ü–æ—Ä—Ç $port ($service) - —Å–≤–æ–±–æ–¥–µ–Ω"
    fi
done

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏
print_header "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö"
echo "Backend errors:"
docker compose logs backend --tail 100 2>/dev/null | grep -i "error" | tail -5 || echo "  –ù–µ—Ç –æ—à–∏–±–æ–∫"
echo ""
echo "Frontend errors:"
docker compose logs frontend --tail 100 2>/dev/null | grep -i "error" | tail -5 || echo "  –ù–µ—Ç –æ—à–∏–±–æ–∫"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints
print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints"
if curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/health | grep -q "200"; then
    print_ok "Backend API health check: OK"
else
    print_error "Backend API health check: FAILED"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
print_header "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"
docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
print_header "–î–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ"
df -h | grep -E "/$|/var/lib/docker" || df -h /

# –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
print_header "–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"
echo "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤:"
echo "   docker compose logs -f [service]"
echo ""
echo "üîß –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞:"
echo "   docker compose restart [service]"
echo ""
echo "üöÄ –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞:"
echo "   docker compose up -d --build"
echo ""
echo "üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã:"
echo "   docker system prune -a"