// ========================================
// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô backend/src/server.js
// CORS –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–±—Ä–∞–Ω–æ!
// ========================================

const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
const morgan = require('morgan');
require('dotenv').config();

const db = require('./config/database');
const rabbitmq = require('./config/rabbitmq');
const { rateLimiter } = require('./middleware/auth');

// Services
const SyncService = require('./services/SyncService');
const BillingService = require('./services/BillingService');
const PIMService = require('./services/PIMService');

// Routes
const authRoutes = require('./routes/auth');
const productsRoutes = require('./routes/products');
const billingRoutes = require('./routes/billing');
const syncRoutes = require('./routes/sync');
const marketplacesRoutes = require('./routes/marketplaces');
const suppliersRoutes = require('./routes/suppliers');

const app = express();
const PORT = process.env.PORT || 3000;

// ========================================
// CORS –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø - –ï–î–ò–ù–°–¢–í–ï–ù–ù–û–ï –ú–ï–°–¢–û!
// ========================================
const corsOptions = {
  origin: [
    'https://moduletrade.ru',
    'https://app.moduletrade.ru',
    'https://www.moduletrade.ru'
  ],
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: [
    'Origin',
    'X-Requested-With',
    'Content-Type',
    'Accept',
    'Authorization',
    'X-Real-IP',
    'X-Forwarded-For',
    'X-Forwarded-Proto'
  ],
  optionsSuccessStatus: 200
};

// ========================================
// MIDDLEWARE –í –ü–†–ê–í–ò–õ–¨–ù–û–ú –ü–û–†–Ø–î–ö–ï
// ========================================

// Security headers
app.use(helmet({
  crossOriginEmbedderPolicy: false,
  contentSecurityPolicy: false
}));

// CORS - –ï–î–ò–ù–°–¢–í–ï–ù–ù–û–ï –ú–ï–°–¢–û –£–°–¢–ê–ù–û–í–ö–ò CORS!
app.use(cors(corsOptions));

// –°–∂–∞—Ç–∏–µ
app.use(compression());

// –ü–∞—Ä—Å–∏–Ω–≥ JSON –∏ URL
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
app.use(morgan('combined'));

// ========================================
// HEALTH CHECK - –ë–ï–ó PREFIX
// ========================================
app.get('/health', (req, res) => {
  res.json({
    status: 'ok',
    timestamp: new Date().toISOString(),
    version: '1.0.0',
    environment: process.env.NODE_ENV || 'development'
  });
});

// ========================================
// API ROUTES - –ë–ï–ó /api PREFIX!
// ========================================
// –í–∞–∂–Ω–æ: nginx —É–±–∏—Ä–∞–µ—Ç /api –∏–∑ –ø—É—Ç–∏, –ø–æ—ç—Ç–æ–º—É –∑–¥–µ—Å—å routes –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞

app.use('/auth', authRoutes);
app.use('/products', productsRoutes);
app.use('/billing', billingRoutes);
app.use('/sync', syncRoutes);
app.use('/marketplaces', marketplacesRoutes);
app.use('/suppliers', suppliersRoutes);

// ========================================
// RATE LIMITING (–ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö routes)
// ========================================
app.use(rateLimiter(100, 60000)); // 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É

// ========================================
// DEBUG MIDDLEWARE - –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
// ========================================
app.use((req, res, next) => {
  console.log(`üîç ${new Date().toISOString()} - ${req.method} ${req.path}`);
  console.log('Headers:', {
    'content-type': req.headers['content-type'],
    'authorization': req.headers.authorization ? 'Bearer ***' : 'none',
    'origin': req.headers.origin,
    'user-agent': req.headers['user-agent']?.substring(0, 50) + '...'
  });
  next();
});

// ========================================
// TEST ENDPOINTS –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
// ========================================
app.get('/test', (req, res) => {
  res.json({
    message: 'Backend is working!',
    timestamp: new Date().toISOString(),
    headers: req.headers
  });
});

app.post('/test-auth', (req, res) => {
  res.json({
    message: 'Auth endpoint accessible',
    body: req.body,
    timestamp: new Date().toISOString()
  });
});

// ========================================
// ERROR HANDLING MIDDLEWARE
// ========================================
app.use((err, req, res, next) => {
  console.error('üö® Global error handler:', err);

  // –ù–ï –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú CORS headers –∑–¥–µ—Å—å - middleware —É–∂–µ –∏—Ö —É—Å—Ç–∞–Ω–æ–≤–∏–ª!

  res.status(err.status || 500).json({
    success: false,
    error: err.message || 'Internal server error',
    timestamp: new Date().toISOString()
  });
});

// ========================================
// 404 HANDLER
// ========================================
app.use((req, res) => {
  console.log(`‚ùå 404 - Route not found: ${req.method} ${req.path}`);

  // –ù–ï –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú CORS headers –∑–¥–µ—Å—å - middleware —É–∂–µ –∏—Ö —É—Å—Ç–∞–Ω–æ–≤–∏–ª!

  res.status(404).json({
    success: false,
    error: 'Route not found',
    path: req.path,
    method: req.method,
    timestamp: new Date().toISOString()
  });
});

// ========================================
// INITIALIZE SERVICES
// ========================================
async function initializeServices() {
  try {
    console.log('üöÄ Initializing services...');

    // Connect to RabbitMQ (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è—Ö)
    try {
      await rabbitmq.connect();
      console.log('‚úÖ RabbitMQ connected successfully');
    } catch (error) {
      console.warn('‚ö†Ô∏è RabbitMQ connection failed:', error.message);
    }

    // Initialize services
    try {
      const billingService = new BillingService();
      await billingService.initializeTariffs();
      console.log('‚úÖ BillingService initialized successfully');
    } catch (error) {
      console.warn('‚ö†Ô∏è BillingService initialization failed:', error.message);
    }

    const syncService = new SyncService();
    const pimService = new PIMService();

    console.log('‚úÖ SyncService ready');
    console.log('‚úÖ PIMService ready');
    console.log('‚úÖ All services initialized successfully');

  } catch (error) {
    console.error('üö® Service initialization error:', error);
    // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
  }
}

// ========================================
// START SERVER
// ========================================
async function startServer() {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
    await initializeServices();

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    app.listen(PORT, '0.0.0.0', () => {
      console.log('üéâ ========================================');
      console.log(`üöÄ Server running on port ${PORT}`);
      console.log(`üåç Environment: ${process.env.NODE_ENV || 'development'}`);
      console.log(`üîó Health check: http://localhost:${PORT}/health`);
      console.log(`üîó API test: http://localhost:${PORT}/test`);
      console.log('üéâ ========================================');
    });

  } catch (error) {
    console.error('üö® Failed to start server:', error);
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  console.log('üì¥ Received SIGINT, shutting down gracefully...');
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('üì¥ Received SIGTERM, shutting down gracefully...');
  process.exit(0);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  console.error('üö® Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
  console.error('üö® Uncaught Exception:', error);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
startServer();

module.exports = app;