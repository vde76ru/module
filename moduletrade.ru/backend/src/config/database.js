// backend/src/config/database.js
const { Pool } = require('pg');

// ========================================
// DATABASE CONFIGURATION
// ========================================

// –û—Å–Ω–æ–≤–Ω–æ–π –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è public —Å—Ö–µ–º—ã
const mainPoolConfig = {
  host: process.env.DB_HOST || 'localhost',
  port: process.env.DB_PORT || 5432,
  database: process.env.DB_NAME || 'saas_platform',
  user: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD || 'password',

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–∞
  min: 2,
  max: 20,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 10000,
  statement_timeout: 30000,
  query_timeout: 30000,

  // SSL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è production
  ssl: process.env.NODE_ENV === 'production' ? {
    rejectUnauthorized: false
  } : false,

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  application_name: 'moduletrade-backend',
  keepAlive: true,
  keepAliveInitialDelayMillis: 10000
};

const mainPool = new Pool(mainPoolConfig);

// ========================================
// POOL EVENT HANDLERS
// ========================================

mainPool.on('connect', (client) => {
  console.log('‚úÖ –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º search_path –¥–ª—è –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ—Å—Ç–∏
  client.query('SET search_path TO public', (err) => {
    if (err) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ search_path:', err);
    }
  });
});

mainPool.on('error', (err, client) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ PostgreSQL –ø—É–ª–∞:', err);
  console.error('Client:', client ? 'Connected' : 'Not connected');
});

mainPool.on('acquire', (client) => {
  if (process.env.NODE_ENV !== 'production') {
    console.log('üîó –ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω –∏–∑ –ø—É–ª–∞');
  }
});

mainPool.on('release', (err, client) => {
  if (err) {
    console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ø—É–ª:', err);
  } else if (process.env.NODE_ENV !== 'production') {
    console.log('üîÑ –ö–ª–∏–µ–Ω—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –ø—É–ª');
  }
});

// ========================================
// TENANT POOL CACHE
// ========================================

// –ö–µ—à –ø—É–ª–æ–≤ –¥–ª—è —Ç–µ–Ω–∞–Ω—Ç–æ–≤
const tenantPools = new Map();

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ–Ω–∞–Ω—Ç–∞
 * @param {string} schemaName - –ò–º—è —Å—Ö–µ–º—ã —Ç–µ–Ω–∞–Ω—Ç–∞
 * @returns {Pool} - –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
 */
function getTenantPool(schemaName) {
  if (!schemaName || schemaName === 'public') {
    return mainPool;
  }

  if (tenantPools.has(schemaName)) {
    return tenantPools.get(schemaName);
  }

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—É–ª –¥–ª—è —Ç–µ–Ω–∞–Ω—Ç–∞
  const tenantPoolConfig = {
    ...mainPoolConfig,
    application_name: `moduletrade-tenant-${schemaName}`,
    min: 1,
    max: 10
  };

  const pool = new Pool(tenantPoolConfig);

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º search_path –¥–ª—è —Ç–µ–Ω–∞–Ω—Ç–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
  pool.on('connect', (client) => {
    console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—Ö–µ–º–µ —Ç–µ–Ω–∞–Ω—Ç–∞: ${schemaName}`);
    client.query(`SET search_path TO ${schemaName}, public`, (err) => {
      if (err) {
        console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ search_path –¥–ª—è ${schemaName}:`, err);
      }
    });
  });

  tenantPools.set(schemaName, pool);
  return pool;
}

// ========================================
// UTILITY FUNCTIONS
// ========================================

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
async function testConnection() {
  try {
    const client = await mainPool.connect();
    const result = await client.query('SELECT NOW() as current_time, version() as db_version');
    client.release();

    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ:');
    console.log(`   Time: ${result.rows[0].current_time}`);
    console.log(`   Version: ${result.rows[0].db_version.split(',')[0]}`);

    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', error.message);
    throw error;
  }
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
 */
async function query(text, params, poolToUse = mainPool) {
  const start = Date.now();

  try {
    const result = await poolToUse.query(text, params);
    const duration = Date.now() - start;

    if (process.env.NODE_ENV !== 'production' && duration > 1000) {
      console.warn(`‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å (${duration}ms): ${text.substring(0, 100)}...`);
    }

    return result;
  } catch (error) {
    const duration = Date.now() - start;
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (${duration}ms):`, error.message);
    console.error('Query:', text.substring(0, 200));
    console.error('Params:', params);
    throw error;
  }
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
 */
async function transaction(callback, poolToUse = mainPool) {
  const client = await poolToUse.connect();

  try {
    await client.query('BEGIN');

    const result = await callback(client);

    await client.query('COMMIT');
    return result;

  } catch (error) {
    await client.query('ROLLBACK');
    console.error('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞:', error.message);
    throw error;
  } finally {
    client.release();
  }
}

/**
 * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 */
async function close() {
  try {
    console.log('üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—É–ª
    await mainPool.end();

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø—É–ª—ã —Ç–µ–Ω–∞–Ω—Ç–æ–≤
    for (const [schemaName, pool] of tenantPools.entries()) {
      console.log(`üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ –¥–ª—è —Å—Ö–µ–º—ã: ${schemaName}`);
      await pool.end();
    }

    tenantPools.clear();
    console.log('‚úÖ –í—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –∑–∞–∫—Ä—ã—Ç—ã');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π:', error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–ª–∞—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
 */
function getPoolStats() {
  const mainStats = {
    totalCount: mainPool.totalCount,
    idleCount: mainPool.idleCount,
    waitingCount: mainPool.waitingCount
  };

  const tenantStats = {};
  for (const [schemaName, pool] of tenantPools.entries()) {
    tenantStats[schemaName] = {
      totalCount: pool.totalCount,
      idleCount: pool.idleCount,
      waitingCount: pool.waitingCount
    };
  }

  return {
    main: mainStats,
    tenants: tenantStats
  };
}

// ========================================
// EXPORTS
// ========================================

module.exports = {
  mainPool,
  getTenantPool,
  query,
  transaction,
  close,
  getPoolStats,
  _testConnection: testConnection
};