// backend/scripts/safe_migrate.js
const fs = require('fs');
const path = require('path');
require('dotenv').config();
const db = require('../src/config/database');

// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
const MIGRATIONS_DIR = path.join(__dirname, '..', 'migrations');

// --- –£—Ç–∏–ª–∏—Ç—ã ---
const log = (message, level = 'INFO') => {
  const colors = {
    INFO: '\x1b[36m', SUCCESS: '\x1b[32m', WARNING: '\x1b[33m', ERROR: '\x1b[31m', RESET: '\x1b[0m'
  };
  console.log(`${colors[level] || colors.RESET}[${new Date().toISOString()}] ${level}: ${message}${colors.RESET}`);
};

// --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

/**
 * –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π –º–∏–≥—Ä–∞—Ü–∏–π.
 */
async function ensureMigrationsTable() {
  await db.query(`
    CREATE TABLE IF NOT EXISTS schema_migrations (
      id SERIAL PRIMARY KEY,
      filename VARCHAR(255) NOT NULL UNIQUE,
      applied_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
      success BOOLEAN NOT NULL,
      error_message TEXT,
      execution_time_ms INTEGER
    );
  `);
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π –∏–∑ –ë–î.
 */
async function getAppliedMigrations() {
  const result = await db.query("SELECT filename FROM schema_migrations WHERE success = TRUE ORDER BY filename ASC;");
  return result.rows.map(row => row.filename);
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π –∏–∑ –ø–∞–ø–∫–∏.
 */
function getMigrationFiles() {
  if (!fs.existsSync(MIGRATIONS_DIR)) {
    log(`–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–∏–≥—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${MIGRATIONS_DIR}`, 'ERROR');
    return [];
  }
  return fs.readdirSync(MIGRATIONS_DIR).filter(file => file.endsWith('.sql')).sort();
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–Ω—É –º–∏–≥—Ä–∞—Ü–∏—é –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
 * @param {pg.PoolClient} client - –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î.
 * @param {string} filename - –ò–º—è —Ñ–∞–π–ª–∞ –º–∏–≥—Ä–∞—Ü–∏–∏.
 */
async function runMigration(client, filename) {
  const filePath = path.join(MIGRATIONS_DIR, filename);
  const sql = fs.readFileSync(filePath, 'utf8');
  const startTime = Date.now();

  log(`--- üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: ${filename} ---`);

  try {
    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤–µ—Å—å —Ñ–∞–π–ª –≤ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    await client.query('BEGIN');
    await client.query(sql);
    await client.query('COMMIT');

    const executionTime = Date.now() - startTime;
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
    await client.query(
      `INSERT INTO schema_migrations (filename, success, execution_time_ms)
       VALUES ($1, TRUE, $2)
       ON CONFLICT (filename)
       DO UPDATE SET success = EXCLUDED.success,
                     execution_time_ms = EXCLUDED.execution_time_ms,
                     error_message = NULL,
                     applied_at = CURRENT_TIMESTAMP`,
      [filename, executionTime]
    );
    log(`‚úÖ –£—Å–ø–µ—Ö (${executionTime}ms)`, 'SUCCESS');
    return true;

  } catch (error) {
    await client.query('ROLLBACK');
    const executionTime = Date.now() - startTime;
    log(`‚ùå –û–®–ò–ë–ö–ê –≤ ${filename}: ${error.message}`, 'ERROR');

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ–≤–∞–ª
    await client.query(
      `INSERT INTO schema_migrations (filename, success, error_message, execution_time_ms)
       VALUES ($1, FALSE, $2, $3)
       ON CONFLICT (filename)
       DO UPDATE SET success = EXCLUDED.success,
                     error_message = EXCLUDED.error_message,
                     execution_time_ms = EXCLUDED.execution_time_ms,
                     applied_at = CURRENT_TIMESTAMP`,
      [filename, error.message, executionTime]
    );
    return false;
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function migrate() {
  log('–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–∏–≥—Ä–∞—Ü–∏–π...');
  const client = await db.getClient();
  let hadError = false;

  try {
    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const lockKey = BigInt('987654321012345678');
    const { rows } = await client.query('SELECT pg_try_advisory_lock($1) AS acquired', [lockKey]);
    if (!rows[0] || rows[0].acquired !== true) {
      log('‚ö†Ô∏è –î—Ä—É–≥–æ–π –ø—Ä–æ—Ü–µ—Å—Å —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏. –ü—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–ø—É—Å–∫.', 'WARNING');
      return;
    }

    await ensureMigrationsTable();

    // –ü–µ—á–∞—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –º–∏–≥—Ä–∞—Ü–∏–π
    const statusRes = await client.query('SELECT filename, success, error_message FROM schema_migrations ORDER BY filename ASC');
    const statusMap = statusRes.rows.reduce((acc, r) => {
      acc[r.filename] = { success: r.success, error: r.error_message };
      return acc;
    }, {});

    const allFiles = getMigrationFiles();
    log(`\n–°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π (${allFiles.length} —Ñ–∞–π–ª–æ–≤):`);
    allFiles.forEach((file) => {
      if (statusMap[file]) {
        if (statusMap[file].success) {
          log(`  ‚úÖ [–í–´–ü–û–õ–ù–ï–ù–û] ${file}`);
        } else {
          log(`  ‚ùå [–ü–†–û–í–ê–õ–ï–ù–û]  ${file}`);
          if (statusMap[file].error) {
            log(`     ‚îî‚îÄ –ü—Ä–∏—á–∏–Ω–∞: ${statusMap[file].error}`);
          }
        }
      } else {
        log(`  ‚è≥ [–û–ñ–ò–î–ê–ï–¢]    ${file}`);
      }
    });

    const appliedMigrations = Object.keys(statusMap).filter((f) => statusMap[f]?.success);
    const pendingMigrations = allFiles.filter(f => !appliedMigrations.includes(f));

    if (pendingMigrations.length === 0) {
      log('\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –ù–æ–≤—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π –Ω–µ—Ç.', 'SUCCESS');
      return;
    }

    log(`\n–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${pendingMigrations.length} –Ω–æ–≤—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π. –ù–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...`);

    for (const filename of pendingMigrations) {
      const success = await runMigration(client, filename);
      if (!success) {
        hadError = true;
        log('–ü—Ä–µ—Ä—ã–≤–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏.', 'ERROR');
        break; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ
      }
    }

  } catch (error) {
    hadError = true;
    log(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: ${error.message}`, 'ERROR');
  } finally {
    // –°–Ω–∏–º–∞–µ–º advisory lock (–µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∂–∏–≤–æ)
    try {
      const lockKey = BigInt('987654321012345678');
      await client.query('SELECT pg_advisory_unlock($1)', [lockKey]);
    } catch (_) { /* ignore */ }

    await client.release();
    await db.gracefulShutdown();
    log('–ü—Ä–æ—Ü–µ—Å—Å –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω.');

    // –Ø–í–ù–û –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, —á—Ç–æ–±—ã –Ω–µ –≤–∏—Å–µ–ª —Ç–∞–π–º–µ—Ä –ª–æ–≥–≥–µ—Ä–∞
    // –í—ã—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ –Ω–∞–ª–∏—á–∏—é –æ—à–∏–±–æ–∫
    setImmediate(() => process.exit(hadError ? 1 : 0));
  }
}

// --- –ó–∞–ø—É—Å–∫ ---
migrate();