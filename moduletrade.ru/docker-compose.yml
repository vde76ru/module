# ===================================================
# ОБНОВЛЕННЫЙ docker-compose.yml С ИСПРАВЛЕНИЯМИ БЕЗОПАСНОСТИ
# ===================================================

version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: saas_platform
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-SecurePostgresPass2025}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    # ❌ УДАЛЯЕМ ВНЕШНИЙ ПОРТ ДЛЯ БЕЗОПАСНОСТИ
    # ports:
    #   - "5432:5432"
    # ✅ Доступ только внутри Docker-сети
    expose:
      - "5432"
    networks:
      - moduletrade-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    # ✅ ДОБАВЛЯЕМ ПАРОЛЬ И ЗАЩИЩЕННУЮ КОНФИГУРАЦИЮ
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD:-SecureRedisPass2025}
      --protected-mode yes
      --bind 127.0.0.1
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    # ❌ УДАЛЯЕМ ВНЕШНИЙ ПОРТ ДЛЯ БЕЗОПАСНОСТИ
    # ports:
    #   - "6379:6379"
    # ✅ Доступ только внутри Docker-сети
    expose:
      - "6379"
    networks:
      - moduletrade-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-SecureRedisPass2025}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-moduletrade_admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-SecureRabbitPass2025}
      RABBITMQ_DEFAULT_VHOST: /moduletrade
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    # ✅ Управление доступно только локально через nginx proxy
    expose:
      - "5672"
      - "15672"
    networks:
      - moduletrade-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: saas_platform
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-SecurePostgresPass2025}
      # ✅ ОБНОВЛЯЕМ URL REDIS С ПАРОЛЕМ
      REDIS_URL: redis://:${REDIS_PASSWORD:-SecureRedisPass2025}@redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-SecureRedisPass2025}
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-moduletrade_admin}:${RABBITMQ_PASS:-SecureRabbitPass2025}@rabbitmq:5672/moduletrade
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
    volumes:
      - ./backend/uploads:/app/uploads
    expose:
      - "3000"
    networks:
      - moduletrade-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command: npm run start:prod
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-https://api.moduletrade.ru/api}
      REACT_APP_STRIPE_PUBLIC_KEY: ${STRIPE_PUBLIC_KEY}
    expose:
      - "80"
    networks:
      - moduletrade-network
    depends_on:
      - backend
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/certs:/etc/nginx/certs:ro
      - ./nginx/security.conf:/etc/nginx/security.conf:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - moduletrade-network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

# ✅ СОЗДАЕМ ИЗОЛИРОВАННУЮ СЕТЬ
networks:
  moduletrade-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data: