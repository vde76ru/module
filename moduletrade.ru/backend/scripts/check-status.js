/* ============================================================
–§–∞–π–ª: backend/scripts/check-status.js
–û–ø–∏—Å–∞–Ω–∏–µ: –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–π.
============================================================
*/

const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

const pool = new Pool({
  host: process.env.DB_HOST || 'postgres',
  port: parseInt(process.env.DB_PORT, 10) || 5432,
  database: process.env.DB_NAME || 'saas_platform',
  user: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD || 'password',
});

const MIGRATIONS_DIR = path.join(__dirname, '..', 'migrations');

async function checkMigrationStatus() {
  console.log('üìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n');
  let client;

  try {
    client = await pool.connect();
    const connInfo = await client.query('SELECT current_database(), current_user, version()');
    console.log(`üîó –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${connInfo.rows[0].current_database}`);
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${connInfo.rows[0].current_user}`);
    console.log(`üìù PostgreSQL: ${connInfo.rows[0].version.split(' ').slice(0, 2).join(' ')}\n`);

    const tableExistsRes = await client.query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' AND table_name = 'schema_migrations'
      );
    `);

    const allFiles = fs.existsSync(MIGRATIONS_DIR)
      ? fs.readdirSync(MIGRATIONS_DIR).filter(f => f.endsWith('.sql')).sort()
      : [];

    if (!tableExistsRes.rows[0].exists) {
      console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ schema_migrations –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–∏–≥—Ä–∞—Ü–∏–π.');
      console.log(`\n‚è≥ –ù–∞–π–¥–µ–Ω–æ ${allFiles.length} —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:`);
      allFiles.forEach(file => console.log(`   üìÑ ${file}`));
      return;
    }

    const executedResult = await client.query('SELECT filename, applied_at, success FROM schema_migrations ORDER BY id');
    const executedFiles = executedResult.rows.map(row => row.filename);
    const pendingFiles = allFiles.filter(file => !executedFiles.includes(file));

    console.log(`‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ (${executedResult.rows.length}):`);
    if (executedResult.rows.length === 0) {
      console.log('   –ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π.');
    } else {
      executedResult.rows.forEach(row => {
        const status = row.success ? '‚úì' : '‚úó';
        const date = new Date(row.applied_at).toISOString().slice(0, 19).replace('T', ' ');
        console.log(`   ${status} ${row.filename} (${date})`);
      });
    }

    console.log(`\n‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (${pendingFiles.length}):`);
    if (pendingFiles.length === 0) {
      console.log('   ‚ú® –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!');
    } else {
      pendingFiles.forEach(file => console.log(`   üìÑ ${file}`));
      console.log(`\nüí° –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: npm run migrate`);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error.message);
  } finally {
    if (client) client.release();
    await pool.end();
  }
}

if (require.main === module) {
  checkMigrationStatus();
}
