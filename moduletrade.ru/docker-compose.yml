# ==============================================
# MODULETRADE DOCKER-COMPOSE CONFIGURATION
# ==============================================

services:
  # ==============================================
  # POSTGRESQL DATABASE
  # ==============================================
  postgres:
    image: postgres:15-alpine
    container_name: moduletrade_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-saas_platform}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-SecurePostgresPass2025}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    networks:
      - moduletrade-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-saas_platform}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    command: >
      postgres 
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200

  # ==============================================
  # REDIS CACHE
  # ==============================================
  redis:
    image: redis:7-alpine
    container_name: moduletrade_redis
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-SecureRedisPass2025}
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD:-SecureRedisPass2025}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 60 1000
      --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - moduletrade-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # ==============================================
  # RABBITMQ MESSAGE BROKER
  # ==============================================
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: moduletrade_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-moduletrade_admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-SecureRabbitPass2025}
      RABBITMQ_DEFAULT_VHOST: moduletrade
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - moduletrade-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # ==============================================
  # BACKEND API SERVER
  # ==============================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: moduletrade_backend
    environment:
      # Окружение
      NODE_ENV: ${NODE_ENV:-production}
      
      # База данных
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-saas_platform}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-SecurePostgresPass2025}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-SecureRedisPass2025}
      REDIS_URL: redis://:${REDIS_PASSWORD:-SecureRedisPass2025}@redis:6379
      
      # RabbitMQ
      RABBITMQ_USER: ${RABBITMQ_USER:-moduletrade_admin}
      RABBITMQ_PASS: ${RABBITMQ_PASS:-SecureRabbitPass2025}
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-moduletrade_admin}:${RABBITMQ_PASS:-SecureRabbitPass2025}@rabbitmq:5672/moduletrade
      
      # JWT
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      
      # Stripe
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      
      # URLs
      API_URL: ${API_URL:-https://api.moduletrade.ru}
      FRONTEND_URL: ${FRONTEND_URL:-https://moduletrade.ru}
      
      # Security
      CORS_ORIGIN: ${CORS_ORIGIN:-https://moduletrade.ru,https://www.moduletrade.ru}
      RATE_LIMIT_ENABLED: ${RATE_LIMIT_ENABLED:-true}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      
      # Uploads
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-50MB}
      UPLOAD_DIR: ./uploads
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    ports:
      - "3000:3000"
    networks:
      - moduletrade-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # ==============================================
  # FRONTEND REACT APP
  # ==============================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-https://api.moduletrade.ru/api}
    container_name: moduletrade_frontend
    ports:
      - "80:80"
    networks:
      - moduletrade-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # ==============================================
  # NGINX REVERSE PROXY
  # ==============================================
  nginx:
    image: nginx:alpine
    container_name: moduletrade_nginx
    ports:
      - "443:443"
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/certs:/etc/nginx/certs:ro
      - nginx_logs:/var/log/nginx
    networks:
      - moduletrade-network
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

# ==============================================
# DOCKER VOLUMES
# ==============================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local

# ==============================================
# DOCKER NETWORKS
# ==============================================
networks:
  moduletrade-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16