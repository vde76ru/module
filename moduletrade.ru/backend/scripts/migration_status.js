// backend/scripts/migration_status.js
const fs = require('fs');
const path = require('path');
require('dotenv').config();
const db = require('../src/config/database');

// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
const MIGRATIONS_DIR = path.join(__dirname, '..', 'migrations');

// --- –£—Ç–∏–ª–∏—Ç—ã ---
const log = (message) => console.log(message);
const colors = {
  green: '\x1b[32m', yellow: '\x1b[33m', red: '\x1b[31m', cyan: '\x1b[36m', reset: '\x1b[0m'
};

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function checkStatus() {
  log(colors.cyan + '--- –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---' + colors.reset);

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã –º–∏–≥—Ä–∞—Ü–∏–π
    const tableExists = await db.query("SELECT to_regclass('public.schema_migrations');");
    if (!tableExists.rows[0].to_regclass) {
      log(colors.yellow + '‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ `schema_migrations` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é (`npm run migrate`) –¥–ª—è –µ–µ —Å–æ–∑–¥–∞–Ω–∏—è.' + colors.reset);
      return;
    }
    
    const allFiles = fs.readdirSync(MIGRATIONS_DIR).filter(file => file.endsWith('.sql')).sort();
    const dbMigrationsResult = await db.query('SELECT filename, success, error_message FROM schema_migrations ORDER BY filename ASC;');
    const dbMigrations = dbMigrationsResult.rows.reduce((acc, row) => {
      acc[row.filename] = { success: row.success, error: row.error_message };
      return acc;
    }, {});

    log(`\nüìÅ –ù–∞–π–¥–µ–Ω–æ ${allFiles.length} —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π. –°—Ç–∞—Ç—É—Å –≤ –ë–î:\n`);

    let pendingCount = 0;

    allFiles.forEach(file => {
      if (dbMigrations[file]) {
        if (dbMigrations[file].success) {
          log(`${colors.green}  ‚úÖ  [–í–´–ü–û–õ–ù–ï–ù–û] ${file}${colors.reset}`);
        } else {
          log(`${colors.red}  ‚ùå  [–ü–†–û–í–ê–õ–ï–ù–û]  ${file}${colors.reset}`);
          log(`      ‚îî‚îÄ –û—à–∏–±–∫–∞: ${dbMigrations[file].error}`);
        }
      } else {
        log(`${colors.yellow}  ‚è≥  [–û–ñ–ò–î–ê–ï–¢]    ${file}${colors.reset}`);
        pendingCount++;
      }
    });

    log('\n' + '-'.repeat(35));
    if (pendingCount > 0) {
      log(colors.yellow + `\nüí° –ù–∞–π–¥–µ–Ω–æ ${pendingCount} –æ–∂–∏–¥–∞—é—â–∏—Ö –º–∏–≥—Ä–∞—Ü–∏–π. –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ 'npm run migrate'.` + colors.reset);
    } else {
      log(colors.green + '\nüéâ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.' + colors.reset);
    }

  } catch (error) {
    log(colors.red + `\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å: ${error.message}` + colors.reset);
  } finally {
    await db.gracefulShutdown();
  }
}

// --- –ó–∞–ø—É—Å–∫ ---
checkStatus();